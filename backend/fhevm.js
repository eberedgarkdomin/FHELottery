import { createInstance } from "../fhevmjs/dist/node.js";

let instance;

export async function initFheInstance() {
  const publicKey = "0x0000000000000000000000000000000000000001";
  instance = await createInstance({
    chainId: 11155111,
    kmsAddress: "0x0000000000000000000000000000000000000043",
    publicKey,
  });
  console.log("üîê FHE Instance –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
}

export async function encryptValue(n) {
  if (!instance) throw new Error("FHE instance not initialized");

  const result = instance.encrypt32(n);

  let bytes;
  if (typeof result?.ciphertext === "string") {
    if (result.ciphertext.startsWith("encrypted(")) {
      throw new Error("‚ùå encrypt32 –≤–µ—Ä–Ω—É–ª 'encrypted(...)' ‚Äî —ç—Ç–æ –ù–ï –±–∞–π—Ç—ã!");
    }
    bytes = Buffer.from(result.ciphertext.replace(/^0x/, ""), "hex");
  } else if (result?.ciphertext instanceof Uint8Array) {
    bytes = Buffer.from(result.ciphertext);
  } else {
    throw new Error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ciphertext: " + typeof result.ciphertext);
  }

  return bytes;
}
